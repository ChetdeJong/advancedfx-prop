static const float2 cDepthFactor = float2(10000.0f, 0.0f);

static const int SKINNING = 0;
static const int COMPRESSED_VERTS = 0;

const float4x4 cViewProj : register(c8);
const float4x3 cModel[53] : register(c58);

float3 mul4x3(float4 v, float4x3 m)
{
	return float3(dot(v, transpose(m)[0]),dot(v, transpose(m)[1]), dot(v, transpose(m)[2]));
}

float4 DecompressBoneWeights( const float4 weights )
{
	float4 result = weights;
	
	if( COMPRESSED_VERTS )
	{
		result += 1;
		result /= 32768;
	}
	
	return result;
}

void SkinPosition(bool bSkinning, const float4 modelPos, const float4 boneWeights, float4 fBoneIndices,
	out float3 worldPos)
{
	int3 boneIndices = D3DCOLORtoUBYTE4( fBoneIndices );
	
	{
		if( !bSkinning )
		{
			worldPos = mul4x3( modelPos, cModel[0] );
		}
		else // skinning - always three bones
		{
			float4x3 mat1 = cModel[boneIndices[0]];
			float4x3 mat2 = cModel[boneIndices[1]];
			float4x3 mat3 = cModel[boneIndices[2]];
			
			float3 weights = DecompressBoneWeights( boneWeights ).xyz;
			weights[2] = 1 - (weights[0] + weights[1]);
			
			float4x3 blendMatrix = mat1 * weights[0] + mat2 * weights[1] + mat3 * weights[2];
			worldPos = mul4x3( modelPos, blendMatrix );
		}
	}
}

static const bool g_bSkinning = SKINNING ? true : false;

struct VS_INPUT
{
	float4 vPos : POSITION;
	float4 vBoneWeights : BLENDWEIGHT;
	float4 vBoneIndices : BLENDINDICES;
};

struct VS_OUTPUT
{
	float4 projPos : POSITION;
	float3 zValue : TEXCOORD0;
};

VS_OUTPUT main( const VS_INPUT v )
{
	VS_OUTPUT o;
	
	float3 worldPos;
	SkinPosition( g_bSkinning, v.vPos, v.vBoneWeights, v.vBoneIndices, worldPos );
	float4 projPos = mul( float4( worldPos, 1 ), cViewProj);
	
	o.projPos = projPos;
	o.zValue.x = projPos.x;
	o.zValue.y = projPos.y;
	o.zValue.z = (o.projPos.z -cDepthFactor.y) / cDepthFactor.x;
	
	return o;
}


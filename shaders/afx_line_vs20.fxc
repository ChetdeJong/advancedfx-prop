const float4x4 cViewProj : register(c8);

const float3 cScreenInfo : register(c48);

struct VS_INPUT
{
	float3 xyz : POSITION;	// current line point
	float4 diffuse : COLOR;	// current vertex colour
	float2 t0 : TEXCOORD0;	// t0.x - current vertex extrusion direction 1.0/-1.0, since there are two vertices per line point; t1.y - reserved
	float3 t1 : TEXCOORD1;	// direction to previous line point (unit vector)
	float3 t2 : TEXCOORD2;	// direction to next line point (unit vector)
};

struct VS_OUTPUT
{
	float4 xyzw : POSITION;
	float4 diffuse : COLOR;
};

float4 projectPos(float3 worldPos)
{
	float4 result =  mul(float4(worldPos, 1), cViewProj);
	
	if(0 != result.w)
	{
		result.x = result.x / result.w;
		result.y = result.y / result.w;
		result.z = result.z / result.w;
		result.w = 1.0;
	}
	
	return result;
}

float2 projectPos2d(float3 worldPos)
{
	float4 result =  projectPos(worldPos);
	
	return float2(result.x, result.y);
}

float2 saveNormalize(float2 x)
{
	if(any(x)) x = normalize(x);
	
	return x;
}

/// <summary>Rotates 90 degrees counter clock wise.</summary>
float2 rot90CCW(float2 x)
{
	return float2(-x.y,x.x);
}

/// <summary>Rotates 90 degrees clock wise.</summary>
float2 rot90CW(float2 x)
{
	return float2(x.y,-x.x);
}

// this somewhat does what it should, but only somewhat :-/

VS_OUTPUT main( const VS_INPUT i )
{
	VS_OUTPUT o;
	
	o.diffuse = i.diffuse;
	
	float4 projPos = projectPos(i.xyz);
	float2 projPos2d = projPos.xy;
	
	float2 prev, next, miterPoint;
	
	if(0<=i.t0.x)
	{
		prev = saveNormalize(rot90CCW(projectPos2d(i.xyz+i.t1)-projPos2d));
		next = saveNormalize(rot90CW(projectPos2d(i.xyz+i.t2)-projPos2d));
	}
	else
	{
		prev = saveNormalize(rot90CW(projectPos2d(i.xyz+i.t1)-projPos2d));
		next = saveNormalize(rot90CCW(projectPos2d(i.xyz+i.t2)-projPos2d));
	}

	miterPoint = next + prev;
	
	float miterOnNextLength = length(dot(miterPoint,next));
	if(miterOnNextLength) miterPoint = miterPoint / miterOnNextLength;
	
	float bbxmin = min(next.x, prev.x);
	float bbxmax = max(next.x, prev.x);
	float bbymin = min(next.y, prev.y);
	float bbymax = max(next.y, prev.y);
	
	if(miterPoint.x < bbxmin) miterPoint.x = bbxmin;
	else if(miterPoint.x > bbxmax) miterPoint.x = bbxmax;

	if(miterPoint.y < bbymin) miterPoint.y = bbymin;
	else if(miterPoint.y > bbymax) miterPoint.y = bbymax;
	
	miterPoint = miterPoint * cScreenInfo.z;
	miterPoint.x = miterPoint.x * cScreenInfo.x;
	miterPoint.y = miterPoint.y * cScreenInfo.y;

	projPos.x += miterPoint.x;
	projPos.y += miterPoint.y;
	
	o.xyzw = projPos;
	
	return o;
}


// Copyright (c) Valve Corporation, All rights reserved.
// File taken from Valve's Alien Swarm SDK.
// Modified by advancedfx.org.

// AFX: "AFXMODE" "0..4"

// AFXMODE:
// 0 - gray depth
// 1 - rgb-encoded depth, solid and alphaclipped
// 2 - green matte, solid and alphaclipped
// 3 - alpha matte, draw blackish
// 4 - alpha matte, draw whitish

//========== Copyright (c) Valve Corporation, All rights reserved. ==========//

// STATIC: "SHADER_SRGB_READ"		"0..1"	[XBOX]
// STATIC: "SHADER_SRGB_READ"		"0..0"	[PC]

//// STATIC: "SHADOWDEPTH"			"0..1"
//// We don't support this.
#define SHADOWDEPTH 0

// STATIC: "ALPHATESTREF"			"0..1"

//// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"	"0..1"		[ps20b] [PC]
//// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"	"0..0"		[ps20b] [XBOX]
//// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"	"0..0"		[ps20]
//// We ignore this.
#define WRITE_DEPTH_TO_DESTALPHA 0

////#include "common_fog_ps_fxc.h"
//// Don't care about FOG.
#define PIXELFOGTYPE -1
#define DOPIXELFOG 0
#define HARDWAREFOGBLEND 0

#include "common_ps_fxc.h"

float4 g_FogParams						: register( c0 );
float4 g_EyePos							: register( c1 ); // EyePos = xyz, AlphaTestRef = w

const float4 g_AfxConstants : register( c31 );

#define g_cAfx_ClipPlaneSubtractValue g_AfxConstants.x
#define g_cAfx_ClipPlaneMulValue g_AfxConstants.y
#define g_cAfx_AlphaThreshold g_AfxConstants.z

// VS_OUTPUT in a common file.
#define PIXELSHADER
#include "common_splinerope_fxc.h"

sampler BaseTextureSampler	: register( s0 );
sampler NormalSampler		: register( s1 );


float4 Afx_FinalOutput(float alpha, float zValue)
{
#if 0 == AFXMODE
	float dist = (zValue -g_cAfx_ClipPlaneSubtractValue) * g_cAfx_ClipPlaneMulValue;
	return float4( dist, dist, dist, alpha );
#elif 1 == AFXMODE
#if !ALPHATESTREF
	// apparently this is not a good idea for now: clip( alpha - g_cAfx_AlphaThreshold );
#endif
	float dist = (zValue -g_cAfx_ClipPlaneSubtractValue) * g_cAfx_ClipPlaneMulValue;
	dist = saturate(dist);
	const float maxint24 = 256*256*256-1;
	float3 color = dist * float3(maxint24/(256),maxint24/(256*256),maxint24/(256*256*256));
	color = frac(color);
	color.b -= color.g/256.0;
	color.g -= color.r/256.0;
	color *= 256/255.0;
	return float4(color, 1.0);
#elif 2 == AFXMODE
#if !ALPHATESTREF
	// apparently this is not a good idea for now: clip( alpha - g_cAfx_AlphaThreshold );
#endif
	return float4( 0, 1, 0, 1.0 );
#elif 3 == AFXMODE
	return float4( 0, 0, 0, alpha );
#elif 4 == AFXMODE
	return float4( 1, 1, 1, alpha );
#endif
}


float4 main( PS_INPUT i ) : COLOR
{
	#if ( SHADOWDEPTH == 0 )
	{
		float3 vNormalMapDir = tex2D( NormalSampler, i.texCoord.xy ); // Get the 3-vector from the normal map
		float4 textureColor = tex2Dsrgb( BaseTextureSampler, i.texCoord.xy );

		//Expand compacted vectors
		vNormalMapDir = ( vNormalMapDir - 0.5 ) * 2.0;
		float3 vLightDir = float3( 0.0f, 0.0f, 1.0f );

		float lightDirDotNormalMap = dot( vNormalMapDir, vLightDir ); //normalMap dot dirLightDir

		// do half-lambert on the dot
		lightDirDotNormalMap = lightDirDotNormalMap * 0.5 + 0.5;
		lightDirDotNormalMap = lightDirDotNormalMap * lightDirDotNormalMap;

		float4 resultColor;
		resultColor.xyz = lightDirDotNormalMap * ( textureColor.rgb * i.argbcolor.rgb );
		resultColor.a = textureColor.a * i.argbcolor.a;
		
#if ALPHATESTREF
		clip(resultColor.a -g_EyePos.w -0.5);
#endif

		//float fogFactor = CalcPixelFogFactor( PIXELFOGTYPE, g_FogParams, g_EyePos.xyz, i.worldPos_projPosZ.xyz, i.worldPos_projPosZ.w );
		//return FinalOutput( resultColor, fogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, (WRITE_DEPTH_TO_DESTALPHA != 0), i.worldPos_projPosZ.w );
		return Afx_FinalOutput(resultColor.a, i.worldPos_projPosZ.w);
	}
	#else
	{
		return float4( 0.0f, 0.0f, 0.0f, 1.0f );
	}
	#endif
}

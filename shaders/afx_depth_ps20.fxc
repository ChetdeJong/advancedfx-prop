// AFX: "AFXCLIP" "0..1"
// AFX: "AFXDEPTHMODE" "0..2"
// AFX: "AFXD24" "0..1"

// AFXCLIP:
// 0 - no clipping
// 1 - clip max value (so we don't overdraw previous depth-passes (i.e. skybox)).

// AFXDEPTHMODE:
// 0 - inverse depth (original)
// 1 - linear depth
// 2 - logarithmic depth (natural logarithm)

// AFXD24:
// 0 - draw gray depth
// 1 - draw rgb-encoded depth

const float4 g_AfxConstants : register( c5 );
const float4 g_AfxConstants2 : register( c6 );

#define g_Afx_zNear g_AfxConstants.x
#define g_Afx_zFar g_AfxConstants.y
#define g_Afx_OutNear g_AfxConstants.z
#define g_Afx_OutFar g_AfxConstants.w

sampler g_sDepthTextureSampler : register( s0 );

struct PS_INPUT
{
	float2 t0 : TEXCOORD0;
};

float4 main( PS_INPUT i ) : COLOR
{
	float depth = tex2D(g_sDepthTextureSampler, i.t0).x;
	
#if 1 == AFXCLIP
	clip(depth >= 1 ? -1 : 1);
#endif

	float f1 = (-1) * g_Afx_zFar * g_Afx_zNear * 1.0;
	float xD = g_Afx_zFar - g_Afx_zNear;
	

#if 0 == AFXDEPTHMODE

	float outNear = (f1 / g_Afx_OutNear + g_Afx_zFar)/xD;
	float outFar = (f1 / g_Afx_OutFar + g_Afx_zFar)/xD;
	
	depth = (depth - outNear) / (outFar - outNear);

#elif 1 <= AFXDEPTHMODE
	
	// Linearize Quake-like depth buffer:
	
	depth = f1/(depth * xD -g_Afx_zFar);
	
	// Transform [outNear,OutFar] to [0,1]
	
	depth = (depth - g_Afx_OutNear) / (g_Afx_OutFar - g_Afx_OutNear);
	
#if 2 == AFXDEPTHMODE
	
	// Logarithmize depth buffer:
	
	depth = log(1 + depth);
#endif

#endif
	
	// Offset and scale for output (slicing):
	
	
#if 0 == AFXD24
	return float4(depth, depth, depth, 1.0);
#elif 1 == AFXD24
	depth = saturate(depth);
	const float maxint24 = 256*256*256-1;
	float3 color = depth * float3(maxint24/(256),maxint24/(256*256),maxint24/(256*256*256));
	color = frac(color);
	color.b -= color.g/256.0;
	color.g -= color.r/256.0;
	color *= 256/255.0;
	return float4(color, 1.0);
#endif
}
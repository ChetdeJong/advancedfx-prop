//
// first let's find the main windows message pump:

break on user32!PeekMessageA

ret and follow the loop(s) till firest non-trivial call:

035e58b8 6a00            push    0
035e58ba 6a00            push    0
035e58bc 6a00            push    0
035e58be 8d442420        lea     eax,[esp+20h]
035e58c2 6a00            push    0
035e58c4 50              push    eax
035e58c5 ffd6            call    esi {USER32!PeekMessageA (7e37a340)} // ret from here
035e58c7 85c0            test    eax,eax
035e58c9 7441            je      hw!F+0xaac (035e590c)
...
035e590c 8b0d7cc96a03    mov     ecx,dword ptr [hw!vgui::Frame::`vftable'+0x416b8 (036ac97c)] ds:0023:036ac97c=03c68640
035e5912 8b01            mov     eax,dword ptr [ecx]
035e5914 ff503c          call    dword ptr [eax+3Ch]
035e5917 8b0d7cc96a03    mov     ecx,dword ptr [hw!vgui::Frame::`vftable'+0x416b8 (036ac97c)]
035e591d 85c0            test    eax,eax
035e591f 7507            jne     hw!F+0xac8 (035e5928)
035e5921 8b11            mov     edx,dword ptr [ecx]
035e5923 ff521c          call    dword ptr [edx+1Ch] // this one (035e6400)

//
// ok 035e6400 is the main function for handling the game's stuff:

035e6400 83ec08          sub     esp,8
...
035e649d e82ec8f9ff      call    hw+0x62cd0 (03582cd0)

> 03582cd0 55              push    ebp
> ...
> 03582d2e e8cdfdffff      call    hw+0x62b00 (03582b00)

/// similar to QW's Host_Frame
--> 03582b00 55              push    ebp
--> ...
03582b73 e8e81ffdff      call    hw+0x34b60 (03554b60) // handles commands and console input (cbuf)
--> ...
--> 03582be7 e854f0fbff      call    hw+0x21c40 (03541c40) // probably CL_EmitEntities
--> ...
--> 03582c12 e899bf0500      call    hw!QGL_D3DInit+0x418b0 (035debb0) // may be blood
--> ...
--> 03582c38 e8f3fcffff      call    hw+0x62930 (03582930)

03541c40 CL_EmitEntities ---> 03538d70 Cam_DrawPlayer --> client!CL_IsThirdPerson (also called from somewhere else)


----> 03582930 a1a07dc603      mov     eax,dword ptr [hw!vgui::Frame::`vftable'+0x5fcadc (03c67da0)] ds:0023:03c67da0=00000000
----> ....
----> 03582939 e81258ffff      call    hw+0x58150 (03578150)

/////// drawing related:
------> 03578150 a1a832ba03      mov     eax,dword ptr [hw!vgui::Frame::`vftable'+0x537fe4 (03ba32a8)] ds:0023:03ba32a8=00000000
------> ...
------> 00357832a e861f50700      call    hw!vgui::Dar<vgui::RepaintSignal *>::operator[]+0xd0 (035f7890)

///////// VGUI viewport drawing related:
--------> 035f7890 e87b33f3ff      call    hw+0xac10 (0352ac10)
--------> ...
--------> 035f78a8 e8f3090000      call    hw!vgui::Frame::operator=+0x5c0 (035f82a0)

/////////// Game Viewport Drawing related:
----------> 035f82a0 d905cce26a03    fld     dword ptr [hw!vgui::Frame::`vftable'+0x43008 (036ae2cc)]
----------> ...
----------> 035f8323 e84862ffff      call    hw!F+0x9710 (035ee570)

///////////// Game Viewport Drawing related: (relates to QW's SCR_UpdateScreen)
------------> 035ee570 83ec2c          sub     esp,2Ch
------------> ...
------------> 035ee61e e8dd95f8ff      call    hw+0x57c00 (03577c00)
------------> 035ee623 e878a60000      call    hw!vgui::Frame::operator=+0xfc0 (035f8ca0) // V_RenderView
------------> 035ee628 e8c3d6f8ff      call    hw+0x5bcf0 (0357bcf0)

